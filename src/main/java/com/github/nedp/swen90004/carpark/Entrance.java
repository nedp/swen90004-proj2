package com.github.nedp.swen90004.carpark;

import static java.lang.Thread.sleep;

/**
 * An implementation of ResourceExit but not ResourceEntry for Cars,
 * which acts as the entrance of the carpark.
 *
 * Cars may exit this Entrance like a normal resource, but never enter it.
 * Instead, when the Entrance is made available, it waits a randomised amount
 * of time before generating its own car.
 *
 * See the implemented interface for documentation on overridden methods.
 */
class Entrance implements ResourceExit<Car> {

    // Used for signaling that the Entrance has a new car ready for retrieval.
    private final Channel<Car> ready = new Channel<>();

    // Used for tracking the 'state' of the entrance; since channels don't allow
    // observation of their contents without retrieving it, this variable is
    // required to allow the printing of state.
    // Cars are stored in this variable when they are generated by #getNewCar
    // and removed from this variable when they are gotten from the section.
    private Car car;

    /** Constructs a new Entrance with its first car. */
    Entrance() {
        try {
            getNewCar();
        } catch (InterruptedException e) {
            throw new RuntimeException("Unexpected wait!", e);
        }
    }

    @Override
    public void makeAvailable() throws InterruptedException {
        sleep(Param.arrivalLapse());
        getNewCar();
    }

    @Override
    public Car getNow() {
        final Car car = this.car;
        this.car = null;
        return car;
    }

    @Override
    public void acquireWhenFull() throws InterruptedException {
        ready.get();
    }

    // Generates a new car and stores it in the Entrance, using the
    // ready channel to signal that the car is available.
    private void getNewCar() throws InterruptedException {
        car = Car.getNew();
        Logger.logEvent("%s arrives", car);
        ready.put(car);
    }

    /** Returns a human readable representation of this entrance's state. */
    String state() {
        return String.format("{entrance:%6s}", car);
    }
}
