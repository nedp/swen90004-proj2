// 2016 semester 1 SWEN90004 Assignment 2b
// Deadlock prone carpark model
//
// Author: Ned Pummeroy (nedp, 586530)
//
// The carpark system is modelled as a combination of resources
// and actors.
//
// Most of the resources are the carpark sections.
// The the entrance and exit of the carpark are also resources.
// The lift can be either one of two resources at a time;
// one resource for going up, one for going down.
// All of these resources are represented as resource[X] where X is
// between 0 and N+3 inclusive.
//
// The actors in the system are the producer, the consumer, and
// the vehicles.
// These control the flow of emptiness and fullness through the
// system.
// We don't consider the flow of cars, because as far as safety and
// liveness are concerned, the cars themselves are irrelevant.

// N is the number of (regular, upper level) sections in the carpark.
const N = 6

const EMPTY = 0
const FULL = 1
range STATES = EMPTY..FULL

// ===== Actors

// A vehicle has a source (I-1) and destination (I).
// It continuously checks that the source is FULL,
// then checks that the destination is EMPTY,
// then moves an item from the source to the destination,
// then makes the destination FULL,
// then makes the source EMPTY.
VEHICLE(I=1) = (
    resource[I-1].lock[FULL] -> resource[I].lock[EMPTY] ->
    resource[I-1].move_to.resource[I] ->
    resource[I].release[FULL] -> resource[I-1].release[EMPTY] ->
    VEHICLE
).

// A producer behaves like a section but instead of being checked
// to be EMPTY and then made FULL,
// it is able to be checked as being FULL when cars arrive.
PRODUCER = (
    lock[EMPTY] -> arrive -> release[FULL] ->
    lock[FULL] -> release[EMPTY] ->
    PRODUCER
).

// A consumer behaves like a section but instead of being checked
// to be FULL and then made EMPTY,
// it is able to be checked as being EMPTY when cars depart.
CONSUMER = (
    lock[EMPTY] -> release[FULL] ->
    lock[FULL] -> depart -> release[EMPTY] ->
    CONSUMER
).

// ===== Actor safety properties using LTL

// A vehicle enters its critical section when locking its destination
// in the EMPTY state,
// and leaves the critical section when releasing its destination
// in the FULL state.
fluent CRITICAL_SECTION[i:0..N+3] =
    <{resource[i].lock[EMPTY]},{resource[i].release[FULL]}>

// No two adjacent vehicles may be in their critical sections
// simultaneously, since they share a section.
assert SAFE_SHARED_SECTIONS = []forall[i:1..N+2]
    (!CRITICAL_SECTION[i] || !CRITICAL_SECTION[i+1])

// In addition to the normal section bounds:
// the loading and launching vehicles must not be in their critical
// sections simultaneously, and...
assert SAFE_LIFT_ACCESS_LOWER =
    [](!CRITICAL_SECTION[1] || !CRITICAL_SECTION[N+3])
// the entry and exit vehicles must not be in their critical
// sections simultaneously.
assert SAFE_LIFT_ACCESS_UPPER =
    [](!CRITICAL_SECTION[2] || !CRITICAL_SECTION[N+2])

// No vehicle may be permanently locked out of its critical section.
assert NO_STARVATION =
    []forall[i:0..N+3] <>CRITICAL_SECTION[i]

// ===== Resources

// A section must first be checked to be EMPTY,
// then made FULL, then be checked to be FULL,
// then made EMPTY, all in a loop.
SECTION = (lock[EMPTY] -> SECTION_USE),
    SECTION_USE = (release[x:STATES] -> lock[x] -> SECTION_USE).

// No resource may be locked or released twice in a row
// and all resources must be locked before being released.
property NO_DOUBLE_LOCK = (
    lock[STATES] -> release[STATES] -> NO_DOUBLE_LOCK
).

// Many resources/sections are part of the lift; but only
// of them may be used at a time.
// In this way, the lift being used to raise an item,
// and the lift being used to lower an item, are modelled as
// mutually exclusive but different resources.
LIFT = (
    lock[EMPTY] -> release[EMPTY] -> LIFT
).

// ===== The system

// The whole car park has:
// * 1 producer, the entrance
// * 1 consumer, the exit,
// * 1 lift; cars are moved from the producer to the lift to the first
//   section and from the last section to the lift to the consumer.
// * N+3 section-like resources;
//   the first actual section is resource[2], the last section is
//   resource[N+1].
//   The lift going up is considered a section, and so is the lift going
//   down.
// * N+3 vehicles, which move cars to resource[i] for i in
//   {1, 2, 3,..., N+3}.
//
// The effect of the operator is modelled by:
// * NOT tracking whether the lift is lowered or raised, but instead:
// * allowing the lift to be used to raise items, or lower items twice
//   in a row.
// That this is identical to having an operator is claimed by me to be self
// evident.
||CARPARK = (
    // Actors
    resource[0]:PRODUCER ||
    resource[N+3]:CONSUMER ||
    forall[i:1..N+3] (
        VEHICLE(i)
    ) ||

    // Resources
    {resource[1],resource[N+2]}::LIFT ||
    forall[i:1..N+2] ( // N+3 sections,
        resource[i]:SECTION // from 1 to N+2
    ) ||

    // Safety
    forall[i:0..N+3] (
        resource[i]::NO_DOUBLE_LOCK
    )
).
